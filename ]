import kivy
from kivy import platform
from kivy.app import App
from kivy.uix.floatlayout import FloatLayout
from kivy.uix.button import Button
from kivy.core.audio import SoundLoader
from kivy.core.window import Window
from kivy.uix.popup import Popup
from kivy.uix.label import Label
from kivy.clock import Clock
import hero_voices
import random
import time

hero_names_rads=['Earthshaker','Sven','Tiny','Kunkka','Beastmaster','Dragon_Knight','Clockwerk','Omniknight','Huskar','Alchemist','Brewmaster','Treant_Protector','Io','Centaur_Warrunner','Timbersaw','Bristleback','Tusk','Elder_Titan','Legion_Commander','Earth_Spirit','Phoenix']
hero_names_rada=['Anti-Mage', 'Drow_Ranger','Juggernaut','Mirana','Morphling','Phantom_Lancer', 'Vengeful_Spirit','Riki','Sniper','Templar_Assassin','Luna','Bounty_Hunter','Ursa','Gyrocopter','Lone_Druid','Naga_Siren','Troll_Warlord','Ember_Spirit']
hero_names_radi=['Crystal_Maiden','Puck','Tinker','Windranger','Zeus','Storm_Spirit','Lina','Shadow_Shaman','Natures_Prophet','Enchantress','Jakiro','Chen','Silencer','Ogre_Magi','Rubick','Disruptor','Keeper_of_the_Light','Skywrath_Mage']
hero_names_dirs=['Axe','Pudge','Sand_King','Slardar','Tidehunter','Wraith_King','Lifestealer','Night_Stalker','Doom','Spirit_Breaker','Lycan','Chaos_Knight','Undying','Magnus','Abaddon']
hero_names_dira=['Bloodseeker','Shadow_Fiend','Razor','Venomancer','Faceless_Void','Phantom_Assassin','Viper','Clinkz','Broodmother','Weaver','Spectre','Meepo','Nyx_Assassin','Slark','Medusa','Terrorblade']
hero_names_diri=['Bane','Lich','Lion','Witch_Doctor','Enigma','Necrophos','Warlock','Queen_of_Pain','Death_Prophet','Pugna','Dazzle','Leshrac','Dark_Seer','Batrider','Ancient_Apparition','Invoker','Outworld_Devourer','Shadow_Demon','Visage']

#All heroes separated by category
all_heroes = [hero_names_rads, hero_names_rada, hero_names_radi, hero_names_dirs, hero_names_dira, hero_names_diri]
base_points = 10
base_lose_points = 10

class MainUI(FloatLayout):

    def __init__(self, **kwargs):
        super(MainUI, self).__init__(**kwargs)
        self.previous_buttons = list()
        self.seconds = 10
        self.score = 0
        self.time = 0
        self.sound = SoundLoader.load('data/sounds/match_ready_no_focus.wav')
        self.load_next()
        self.start()
        #self.stop_time(0)

    def start(self):
        Clock.schedule_interval(self.load_next, self.seconds)
        Clock.schedule_interval(self.update_time, 1)

    def update_time(self, *args):
        self.time = self.time-1
        if self.time>=0:
            self.ids.label_time.text = str(self.time)

    def stop_time(self, *args):
        Clock.unschedule(self.update_time)
        Clock.unschedule(self.load_next)

    def load_next(self, *args):
        if self.previous_buttons:
            for button in self.previous_buttons:
                self.ids.options_layout.remove_widget(button)
                del button
        self.choose_from_category(random.choice(all_heroes))
        self.play_winner_sound()
        #Update time (should vary with dificulty)
        self.time = self.seconds
        self.ids.question_image.source = 'data/images/question_mark.png'

    def show_popup(self, title, text):
        popup = Popup(title=title, content=Label(text=text),size_hint=(0.6,0.4))
        popup.open()

    def update_score(self):
        self.ids.label_score.text = str(self.score)

    def button_click(self, name):
        #Right:
        if self.winner == name:
            #Should implement a: the faster you click, more points (multiply remaining time by standard points)
            if self.time > 0:
                self.score = self.score+(base_points*self.time)
            else: self.score = self.score+base_points
            self.update_score()
            self.show_popup('Yay!', 'You win!')
            for bt in self.previous_buttons:
                bt.disabled = True
            if self.sound:
                self.sound.play()
        #Wrong:
        else:
            self.show_popup('No!', 'WRONG!')
            #Should also implement point reduction with a system equivalent to point gaining
            self.score=self.score-base_lose_points
            self.update_score()

    def play_winner_sound(self):
        for hero_voice in hero_voices.voices:
            if self.winner in hero_voice['name']:
                sound = SoundLoader.load(random.choice(hero_voice['voices']))
                if sound:
                    sound.play()

    def choose_from_category(self, hero_names):
        selected = random.sample(hero_names, 4)
        self.winner = random.choice(selected)
        for name in selected:
            bt = Button(text=name.replace('_',' '), background_normal='data/images/button_off.png', background_down='data/images/button_on.png')
            bt.bind(on_press=lambda x, hero=name: self.button_click(hero))
            self.previous_buttons.append(bt)
            self.ids['options_layout'].add_widget(bt)
   
class GuessTheHeroApp(App):

    def build(self):
        self.icon = 'data/images/dota_icon.png'
        return MainUI()

if __name__=='__main__':
    GuessTheHeroApp().run()
